/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WaterV1Interface extends utils.Interface {
  contractName: "WaterV1";
  functions: {
    "AIR_CONTRACT()": FunctionFragment;
    "BONSAI_CONTRACT()": FunctionFragment;
    "BOOSTER_MULTIPLIER()": FunctionFragment;
    "MAX_WATER_SUPPLY()": FunctionFragment;
    "WATER_FARMING_FACTOR()": FunctionFragment;
    "WATER_SWAP_FACTOR()": FunctionFragment;
    "_allAirsStakeHolders(uint256)": FunctionFragment;
    "addAuthorized(address)": FunctionFragment;
    "airStakeHolders(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimWater()": FunctionFragment;
    "claimableView(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "mintWater(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "rebalanceStakingPool(uint256,uint256)": FunctionFragment;
    "removeAuthorized(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "staking(uint256)": FunctionFragment;
    "swapAirForWater(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAirHolder()": FunctionFragment;
    "totalAirStaked()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBoosterMultiplier(uint256)": FunctionFragment;
    "updateFarmingFactor(uint256)": FunctionFragment;
    "updateMaxWaterSupply(uint256)": FunctionFragment;
    "updateWaterSwapFactor(uint256)": FunctionFragment;
    "waterBonsai(uint256,uint256)": FunctionFragment;
    "withdrawAir(uint256)": FunctionFragment;
    "withdrawAllAirAndClaimWater()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AIR_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BONSAI_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BOOSTER_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WATER_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WATER_FARMING_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WATER_SWAP_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_allAirsStakeHolders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "airStakeHolders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimWater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableView",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWater",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceStakingPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "staking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAirForWater",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAirHolder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAirStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBoosterMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFarmingFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWaterSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWaterSwapFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "waterBonsai",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAir",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllAirAndClaimWater",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AIR_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BONSAI_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BOOSTER_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WATER_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WATER_FARMING_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WATER_SWAP_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_allAirsStakeHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airStakeHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimWater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintWater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAirForWater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAirHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAirStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoosterMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFarmingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWaterSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWaterSwapFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waterBonsai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAir",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllAirAndClaimWater",
    data: BytesLike
  ): Result;

  events: {
    "AirStaked(address,uint256)": EventFragment;
    "AirSwap(address,uint256)": EventFragment;
    "AirUnStaked(address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Burned(address,uint256)": EventFragment;
    "BurnedAir(address,uint256)": EventFragment;
    "Minted(address,uint256)": EventFragment;
    "MintedAir(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakedAir(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnstakedAir(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AirSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AirUnStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnedAir"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedAir"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedAir"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedAir"): EventFragment;
}

export type AirStakedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type AirStakedEventFilter = TypedEventFilter<AirStakedEvent>;

export type AirSwapEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; numberOfWater: BigNumber }
>;

export type AirSwapEventFilter = TypedEventFilter<AirSwapEvent>;

export type AirUnStakedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type AirUnStakedEventFilter = TypedEventFilter<AirUnStakedEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BurnedEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; numberOfWater: BigNumber }
>;

export type BurnedEventFilter = TypedEventFilter<BurnedEvent>;

export type BurnedAirEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; numberOfAirs: BigNumber }
>;

export type BurnedAirEventFilter = TypedEventFilter<BurnedAirEvent>;

export type MintedEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; numberOfWater: BigNumber }
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export type MintedAirEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; numberOfWater: BigNumber }
>;

export type MintedAirEventFilter = TypedEventFilter<MintedAirEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakedAirEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; numberOfAirs: BigNumber }
>;

export type StakedAirEventFilter = TypedEventFilter<StakedAirEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnstakedAirEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; numberOfAirs: BigNumber }
>;

export type UnstakedAirEventFilter = TypedEventFilter<UnstakedAirEvent>;

export interface WaterV1 extends BaseContract {
  contractName: "WaterV1";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WaterV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AIR_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    BONSAI_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    BOOSTER_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WATER_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    WATER_FARMING_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    WATER_SWAP_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    _allAirsStakeHolders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addAuthorized(
      _toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airStakeHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        user: string;
        since: number;
        amount: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimWater(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableView(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWater(
      sender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebalanceStakingPool(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAuthorized(
      _toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staking(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAirForWater(
      airAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAirHolder(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAirStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBoosterMultiplier(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFarmingFactor(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxWaterSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWaterSwapFactor(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    waterBonsai(
      bonsaiId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAir(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllAirAndClaimWater(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AIR_CONTRACT(overrides?: CallOverrides): Promise<string>;

  BONSAI_CONTRACT(overrides?: CallOverrides): Promise<string>;

  BOOSTER_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WATER_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  WATER_FARMING_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  WATER_SWAP_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  _allAirsStakeHolders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  addAuthorized(
    _toAdd: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airStakeHolders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber] & {
      user: string;
      since: number;
      amount: BigNumber;
    }
  >;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimWater(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableView(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWater(
    sender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebalanceStakingPool(
    from: BigNumberish,
    to: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAuthorized(
    _toRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staking(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAirForWater(
    airAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAirHolder(overrides?: CallOverrides): Promise<BigNumber>;

  totalAirStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBoosterMultiplier(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFarmingFactor(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxWaterSupply(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWaterSwapFactor(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  waterBonsai(
    bonsaiId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAir(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllAirAndClaimWater(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AIR_CONTRACT(overrides?: CallOverrides): Promise<string>;

    BONSAI_CONTRACT(overrides?: CallOverrides): Promise<string>;

    BOOSTER_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WATER_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    WATER_FARMING_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    WATER_SWAP_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    _allAirsStakeHolders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addAuthorized(_toAdd: string, overrides?: CallOverrides): Promise<void>;

    airStakeHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        user: string;
        since: number;
        amount: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimWater(overrides?: CallOverrides): Promise<void>;

    claimableView(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintWater(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebalanceStakingPool(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAuthorized(
      _toRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    staking(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swapAirForWater(
      airAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAirHolder(overrides?: CallOverrides): Promise<BigNumber>;

    totalAirStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBoosterMultiplier(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFarmingFactor(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxWaterSupply(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWaterSwapFactor(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    waterBonsai(
      bonsaiId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAir(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAllAirAndClaimWater(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AirStaked(address,uint256)"(
      user?: null,
      amount?: null
    ): AirStakedEventFilter;
    AirStaked(user?: null, amount?: null): AirStakedEventFilter;

    "AirSwap(address,uint256)"(
      owner?: null,
      numberOfWater?: null
    ): AirSwapEventFilter;
    AirSwap(owner?: null, numberOfWater?: null): AirSwapEventFilter;

    "AirUnStaked(address,uint256)"(
      user?: null,
      amount?: null
    ): AirUnStakedEventFilter;
    AirUnStaked(user?: null, amount?: null): AirUnStakedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Burned(address,uint256)"(
      owner?: null,
      numberOfWater?: null
    ): BurnedEventFilter;
    Burned(owner?: null, numberOfWater?: null): BurnedEventFilter;

    "BurnedAir(address,uint256)"(
      owner?: null,
      numberOfAirs?: null
    ): BurnedAirEventFilter;
    BurnedAir(owner?: null, numberOfAirs?: null): BurnedAirEventFilter;

    "Minted(address,uint256)"(
      owner?: null,
      numberOfWater?: null
    ): MintedEventFilter;
    Minted(owner?: null, numberOfWater?: null): MintedEventFilter;

    "MintedAir(address,uint256)"(
      owner?: null,
      numberOfWater?: null
    ): MintedAirEventFilter;
    MintedAir(owner?: null, numberOfWater?: null): MintedAirEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StakedAir(address,uint256)"(
      owner?: null,
      numberOfAirs?: null
    ): StakedAirEventFilter;
    StakedAir(owner?: null, numberOfAirs?: null): StakedAirEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UnstakedAir(address,uint256)"(
      owner?: null,
      numberOfAirs?: null
    ): UnstakedAirEventFilter;
    UnstakedAir(owner?: null, numberOfAirs?: null): UnstakedAirEventFilter;
  };

  estimateGas: {
    AIR_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    BONSAI_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    BOOSTER_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WATER_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    WATER_FARMING_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    WATER_SWAP_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    _allAirsStakeHolders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAuthorized(
      _toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airStakeHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimWater(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableView(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWater(
      sender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceStakingPool(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAuthorized(
      _toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staking(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAirForWater(
      airAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAirHolder(overrides?: CallOverrides): Promise<BigNumber>;

    totalAirStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBoosterMultiplier(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFarmingFactor(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxWaterSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWaterSwapFactor(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    waterBonsai(
      bonsaiId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAir(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllAirAndClaimWater(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AIR_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BONSAI_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BOOSTER_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_WATER_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WATER_FARMING_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WATER_SWAP_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _allAirsStakeHolders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAuthorized(
      _toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airStakeHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimWater(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableView(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWater(
      sender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalanceStakingPool(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAuthorized(
      _toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staking(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAirForWater(
      airAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAirHolder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAirStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBoosterMultiplier(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFarmingFactor(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxWaterSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWaterSwapFactor(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    waterBonsai(
      bonsaiId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAir(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllAirAndClaimWater(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
