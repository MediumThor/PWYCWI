/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AirInterface extends utils.Interface {
  contractName: "Air";
  functions: {
    "AIR_PER_DAY_PER_CM()": FunctionFragment;
    "BASE_HOLDER_AIR()": FunctionFragment;
    "BONSAI_CONTRACT()": FunctionFragment;
    "COOLDOWN_BASE()": FunctionFragment;
    "COOLDOWN_BASE_FACTOR()": FunctionFragment;
    "COOLDOWN_CD_IN_SECS()": FunctionFragment;
    "COOLDOWN_RATE()": FunctionFragment;
    "LEVELING_BASE()": FunctionFragment;
    "LEVELING_RATE()": FunctionFragment;
    "addAuthorized(address)": FunctionFragment;
    "airdropToExistingHolder(uint256,uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnAir(address,uint256)": FunctionFragment;
    "checkSkipCoolingOffAmt(uint256)": FunctionFragment;
    "claimAir(uint256[])": FunctionFragment;
    "claimableView(uint256)": FunctionFragment;
    "cooldownRate(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "feedLevelingRate(uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "levelUpChikn(uint256)": FunctionFragment;
    "mintAir(address,uint256)": FunctionFragment;
    "myClaimableView()": FunctionFragment;
    "myStakedChikn()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "rebalanceEggClaimableToUserWallet(uint256,uint256)": FunctionFragment;
    "removeAuthorized(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "skipCoolingOff(uint256,uint256)": FunctionFragment;
    "stake(uint256[])": FunctionFragment;
    "stakedBonsai(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalCm()": FunctionFragment;
    "totalStakedBonsai()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256[])": FunctionFragment;
    "updateSkipCooldownValues(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "waterBonsai(uint256,uint256)": FunctionFragment;
    "withdrawAllChiknAndClaim(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AIR_PER_DAY_PER_CM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_HOLDER_AIR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BONSAI_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COOLDOWN_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COOLDOWN_BASE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COOLDOWN_CD_IN_SECS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COOLDOWN_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEVELING_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEVELING_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropToExistingHolder",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnAir",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSkipCoolingOffAmt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAir",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feedLevelingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levelUpChikn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAir",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "myClaimableView",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "myStakedChikn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceEggClaimableToUserWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skipCoolingOff",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBonsai",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalCm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStakedBonsai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSkipCooldownValues",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "waterBonsai",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllChiknAndClaim",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "AIR_PER_DAY_PER_CM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_HOLDER_AIR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BONSAI_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COOLDOWN_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COOLDOWN_BASE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COOLDOWN_CD_IN_SECS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COOLDOWN_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEVELING_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEVELING_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropToExistingHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnAir", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkSkipCoolingOffAmt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAir", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedLevelingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelUpChikn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintAir", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myClaimableView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myStakedChikn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceEggClaimableToUserWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "skipCoolingOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBonsai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalCm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedBonsai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSkipCooldownValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waterBonsai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllChiknAndClaim",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burned(address,uint256)": EventFragment;
    "Minted(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnStaked(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnStaked"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BurnedEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; eggsAmt: BigNumber }
>;

export type BurnedEventFilter = TypedEventFilter<BurnedEvent>;

export type MintedEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; eggsAmt: BigNumber }
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tid: BigNumber; ts: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnStakedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tid: BigNumber; ts: BigNumber }
>;

export type UnStakedEventFilter = TypedEventFilter<UnStakedEvent>;

export interface Air extends BaseContract {
  contractName: "Air";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AIR_PER_DAY_PER_CM(overrides?: CallOverrides): Promise<[BigNumber]>;

    BASE_HOLDER_AIR(overrides?: CallOverrides): Promise<[BigNumber]>;

    BONSAI_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    COOLDOWN_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    COOLDOWN_BASE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    COOLDOWN_CD_IN_SECS(overrides?: CallOverrides): Promise<[BigNumber]>;

    COOLDOWN_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    LEVELING_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    LEVELING_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAuthorized(
      _toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropToExistingHolder(
      from: BigNumberish,
      to: BigNumberish,
      amountOfOxygen: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnAir(
      sender: string,
      airAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkSkipCoolingOffAmt(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimAir(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableView(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cooldownRate(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feedLevelingRate(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    levelUpChikn(
      tid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAir(
      sender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    myClaimableView(overrides?: CallOverrides): Promise<[BigNumber]>;

    myStakedChikn(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebalanceEggClaimableToUserWallet(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAuthorized(
      _toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skipCoolingOff(
      tokenId: BigNumberish,
      airAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      tids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedBonsai(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number] & {
        cm: number;
        sinceTs: number;
        lastSkippedTs: number;
        eatenAmount: number;
        cooldownTs: number;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalCm(overrides?: CallOverrides): Promise<[number]>;

    totalStakedBonsai(overrides?: CallOverrides): Promise<[number]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      tids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSkipCooldownValues(
      a: BigNumberish,
      b: BigNumberish,
      c: BigNumberish,
      d: BigNumberish,
      e: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    waterBonsai(
      tokenId: BigNumberish,
      waterAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllChiknAndClaim(
      tids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AIR_PER_DAY_PER_CM(overrides?: CallOverrides): Promise<BigNumber>;

  BASE_HOLDER_AIR(overrides?: CallOverrides): Promise<BigNumber>;

  BONSAI_CONTRACT(overrides?: CallOverrides): Promise<string>;

  COOLDOWN_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  COOLDOWN_BASE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  COOLDOWN_CD_IN_SECS(overrides?: CallOverrides): Promise<BigNumber>;

  COOLDOWN_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  LEVELING_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  LEVELING_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  addAuthorized(
    _toAdd: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropToExistingHolder(
    from: BigNumberish,
    to: BigNumberish,
    amountOfOxygen: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burnAir(
    sender: string,
    airAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkSkipCoolingOffAmt(
    cm: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimAir(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableView(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cooldownRate(cm: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feedLevelingRate(
    cm: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  levelUpChikn(
    tid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAir(
    sender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  myClaimableView(overrides?: CallOverrides): Promise<BigNumber>;

  myStakedChikn(overrides?: CallOverrides): Promise<BigNumber[]>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebalanceEggClaimableToUserWallet(
    from: BigNumberish,
    to: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAuthorized(
    _toRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  skipCoolingOff(
    tokenId: BigNumberish,
    airAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    tids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedBonsai(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number] & {
      cm: number;
      sinceTs: number;
      lastSkippedTs: number;
      eatenAmount: number;
      cooldownTs: number;
    }
  >;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalCm(overrides?: CallOverrides): Promise<number>;

  totalStakedBonsai(overrides?: CallOverrides): Promise<number>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    tids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSkipCooldownValues(
    a: BigNumberish,
    b: BigNumberish,
    c: BigNumberish,
    d: BigNumberish,
    e: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  waterBonsai(
    tokenId: BigNumberish,
    waterAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllChiknAndClaim(
    tids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AIR_PER_DAY_PER_CM(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_HOLDER_AIR(overrides?: CallOverrides): Promise<BigNumber>;

    BONSAI_CONTRACT(overrides?: CallOverrides): Promise<string>;

    COOLDOWN_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    COOLDOWN_BASE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    COOLDOWN_CD_IN_SECS(overrides?: CallOverrides): Promise<BigNumber>;

    COOLDOWN_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    LEVELING_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    LEVELING_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    addAuthorized(_toAdd: string, overrides?: CallOverrides): Promise<void>;

    airdropToExistingHolder(
      from: BigNumberish,
      to: BigNumberish,
      amountOfOxygen: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnAir(
      sender: string,
      airAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSkipCoolingOffAmt(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAir(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimableView(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cooldownRate(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feedLevelingRate(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    levelUpChikn(tid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintAir(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    myClaimableView(overrides?: CallOverrides): Promise<BigNumber>;

    myStakedChikn(overrides?: CallOverrides): Promise<BigNumber[]>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebalanceEggClaimableToUserWallet(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAuthorized(
      _toRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    skipCoolingOff(
      tokenId: BigNumberish,
      airAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(tids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    stakedBonsai(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number] & {
        cm: number;
        sinceTs: number;
        lastSkippedTs: number;
        eatenAmount: number;
        cooldownTs: number;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalCm(overrides?: CallOverrides): Promise<number>;

    totalStakedBonsai(overrides?: CallOverrides): Promise<number>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(tids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    updateSkipCooldownValues(
      a: BigNumberish,
      b: BigNumberish,
      c: BigNumberish,
      d: BigNumberish,
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    waterBonsai(
      tokenId: BigNumberish,
      waterAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllChiknAndClaim(
      tids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Burned(address,uint256)"(owner?: null, eggsAmt?: null): BurnedEventFilter;
    Burned(owner?: null, eggsAmt?: null): BurnedEventFilter;

    "Minted(address,uint256)"(owner?: null, eggsAmt?: null): MintedEventFilter;
    Minted(owner?: null, eggsAmt?: null): MintedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Staked(uint256,uint256)"(tid?: null, ts?: null): StakedEventFilter;
    Staked(tid?: null, ts?: null): StakedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UnStaked(uint256,uint256)"(tid?: null, ts?: null): UnStakedEventFilter;
    UnStaked(tid?: null, ts?: null): UnStakedEventFilter;
  };

  estimateGas: {
    AIR_PER_DAY_PER_CM(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_HOLDER_AIR(overrides?: CallOverrides): Promise<BigNumber>;

    BONSAI_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    COOLDOWN_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    COOLDOWN_BASE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    COOLDOWN_CD_IN_SECS(overrides?: CallOverrides): Promise<BigNumber>;

    COOLDOWN_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    LEVELING_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    LEVELING_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    addAuthorized(
      _toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropToExistingHolder(
      from: BigNumberish,
      to: BigNumberish,
      amountOfOxygen: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnAir(
      sender: string,
      airAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkSkipCoolingOffAmt(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAir(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableView(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cooldownRate(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feedLevelingRate(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    levelUpChikn(
      tid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAir(
      sender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    myClaimableView(overrides?: CallOverrides): Promise<BigNumber>;

    myStakedChikn(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceEggClaimableToUserWallet(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAuthorized(
      _toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    skipCoolingOff(
      tokenId: BigNumberish,
      airAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      tids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedBonsai(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalCm(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedBonsai(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      tids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSkipCooldownValues(
      a: BigNumberish,
      b: BigNumberish,
      c: BigNumberish,
      d: BigNumberish,
      e: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    waterBonsai(
      tokenId: BigNumberish,
      waterAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllChiknAndClaim(
      tids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AIR_PER_DAY_PER_CM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BASE_HOLDER_AIR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BONSAI_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COOLDOWN_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COOLDOWN_BASE_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COOLDOWN_CD_IN_SECS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COOLDOWN_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEVELING_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEVELING_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAuthorized(
      _toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropToExistingHolder(
      from: BigNumberish,
      to: BigNumberish,
      amountOfOxygen: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnAir(
      sender: string,
      airAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkSkipCoolingOffAmt(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAir(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableView(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cooldownRate(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feedLevelingRate(
      cm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    levelUpChikn(
      tid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAir(
      sender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    myClaimableView(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myStakedChikn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalanceEggClaimableToUserWallet(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAuthorized(
      _toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    skipCoolingOff(
      tokenId: BigNumberish,
      airAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      tids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedBonsai(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedBonsai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      tids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSkipCooldownValues(
      a: BigNumberish,
      b: BigNumberish,
      c: BigNumberish,
      d: BigNumberish,
      e: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    waterBonsai(
      tokenId: BigNumberish,
      waterAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllChiknAndClaim(
      tids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
